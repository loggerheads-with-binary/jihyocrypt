"""
python3 -m pip install pycryptodome pretty_traceback

annautils personal cryptography toolbox
Python code to pretty much encrypt and decrypt files, binary, standard objects into each other

syntax: enc/dec_x2x
	where x: s -> Pickleable object; f-> File ; b -> Binary data
	enc/dec : enc -> Encryption , dec -> Decryption
	example: enc_s2f means encrypt from a standard object to a file
"""

BUFFER_SIZE  : int = 3*1024*1024						#3 MB
__version__ : str = '1.2.4'							##Optional Progress Bar Added for most functions
DEFAULT_OBFUSCATION_ROUNDS : int = 6						##N rounds of computation for key_decryptor and first_block_blender

password_to_bytes= lambda password : (password.encode('utf8')) if isinstance(password , str) else password
password_to_str = lambda password: (password.decode('utf8')) if isinstance(password , bytes) else password

"""Copy the following classes into self.password_generators script as well, this is copy pasted for more efficient albeit longer and dirtier code"""


import os, sys
from Crypto.Cipher import Salsa20
from hashlib import sha512 , sha256
import warnings


warnings.warn("Change the way subroutines work in dec_* functions" , Warning)

class PasswordError(ValueError):
	pass

class CorruptionError(ValueError):
	pass

def key_decryptor(nonce : bytes , password : bytes , rounds : int = DEFAULT_OBFUSCATION_ROUNDS):

	r = nonce
	password = password_to_bytes(password)

	for i in range(rounds):
		r = sha256(r + password).digest()

	return r

def first_block_blender(nonce : bytes , enc_password : bytes , user_password : bytes ,  rounds : int = DEFAULT_OBFUSCATION_ROUNDS):

	s = nonce
	major_pass = password_to_bytes(enc_password) + password_to_bytes(user_password)


	for i in range(rounds):
		s = sha512(s + major_pass).digest()

	return s

def key_maker( password : bytes ,nonce : bytes = None , rounds : int = DEFAULT_OBFUSCATION_ROUNDS , redundant : bool = True):

	if nonce == None:

		nonce = os.urandom(8)

	password = password_to_bytes(password)

	r = key_decryptor(nonce , password )

	if redundant:
		s = first_block_blender(nonce , r , password )
		return (nonce , r , s)

	return (nonce , r)

"""Function Classes Copy Stop Here"""

	
full_block , empty_block, block_length = "ðŸŸ¢" , "ðŸ”´" , 25

def eprint(*args, **kwargs):


	print(*args, file=sys.stderr, **kwargs)

def enc_redundant_warning():

	warnings.warn("Encryption being executed using non-redundant mode. This is risky and has no mode of verification/check in decryption.\
	Use this mode only if you understand what you're doing" , Warning)

def dec_redundant_warning():

	warnings.warn("Decryption being conducted using non-redundant mode. Make sure the file was definitely encrypted using \
	non-redundant mode" , Warning)

def enc_b2b(data : bytes , password : bytes, redundant : bool = True , **kwargs  ):

	if not redundant:
		enc_redundant_warning()

	vals = key_maker(password , redundant = redundant)
	cipher = Salsa20.new(vals[1] , nonce = vals[0])

	if redundant:
		return cipher.nonce + vals[-1] + cipher.encrypt(data)

	return cipher.nonce + cipher.encrypt(data)

def enc_b2f(data : bytes , filename : str , password: str , redundant : bool = True , progress_bar : bool = False):

	if not redundant:
		enc_redundant_warning()

	vals = key_maker(password , redundant = redundant)
	cipher = Salsa20.new(vals[1] , vals[0])

	content_length = len(data)
	rounds = content_length//BUFFER_SIZE
	counter = 0

	def subroutine1():
		nonlocal filename , cipher , counter , content_length  , vals, redundant
		global BUFFER_SIZE

		with open(filename , 'wb') as filehandle:

			filehandle.write(cipher.nonce)

			if redundant:
				filehandle.write(vals[-1])

			for _i in range(rounds):
				filehandle.write(cipher.encrypt(data[counter : counter + BUFFER_SIZE]))
				counter += BUFFER_SIZE

			filehandle.write(cipher.encrypt(data[counter : ]))
			counter += BUFFER_SIZE

	if progress_bar :

		import threading
		print(   f"Encrypting Data: |{empty_block*block_length}| 0/{content_length}B", file = sys.stderr , end = '' )

		thread = threading.Thread(target = subroutine1)

		thread.start()

		while thread.is_alive():
			print(   f"\rEncrypting Data: |{((full_block*(counter*block_length//content_length))+(empty_block*block_length))[:25]}| {counter}/{content_length}B",
						file = sys.stderr , end = '' )

		print(   f"\rData Encryption Complete|{full_block*block_length}| {content_length}/{content_length}B", file = sys.stderr  )

	else:

		subroutine1()

	return True

def enc_f2f(input_file : str , output_file : str , password : bytes , redundant : bool = True, progress_bar : bool = False):

	if not redundant:
		enc_redundant_warning()

	vals = key_maker(password , redundant = redundant)
	cipher = Salsa20.new(vals[1] , vals[0])
	counter = 0

	def subroutine1():

		nonlocal content_length , cipher, vals, counter, input_file , output_file , redundant
		global BUFFER_SIZE

		with open(input_file , 'rb') as readhandle:

			with open(output_file , 'wb') as writehandle:

				writehandle.write(cipher.nonce)

				if redundant:
					writehandle.write(vals[-1])

				line_input = readhandle.read(BUFFER_SIZE)
				counter+= BUFFER_SIZE

				while line_input != b"" :

					writehandle.write(cipher.encrypt(line_input))
					line_input = readhandle.read(BUFFER_SIZE)
					counter+= BUFFER_SIZE

	if progress_bar :


		content_length = os.stat(input_file).st_size

		import threading
		print(   f"Encrypting Data: |{empty_block*block_length}| 0/{content_length}B", file = sys.stderr , end = '' )

		thread = threading.Thread(target = subroutine1)

		thread.start()

		while thread.is_alive():
			print(   f"\rEncrypting Data: |{((full_block*(counter*block_length//content_length))+(empty_block*block_length))[:25]}| {counter}/{content_length}B",
						file = sys.stderr , end = '' )

		print(   f"\rData Encryption Complete|{full_block*block_length}| {content_length}/{content_length}B", file = sys.stderr  )

	else:

		subroutine1()

	return True

def dec_f2b(input_file : str , password: bytes , redundant : bool = True, progress_bar : bool = False):

	if not redundant:
		dec_redundant_warning()

	data = b""
	counter = 0

	def subroutine1():

		nonlocal counter, password , data

		with open(input_file , 'rb') as filehandle:

			nonce = filehandle.read(8)

			if len(nonce) != 8 :
				raise CorruptionError("File is corrupted to less than 8 bytes")

			vals = key_maker(password = password, nonce = nonce , redundant = redundant)
			cipher = Salsa20.new(vals[1] , vals[0])
			del nonce , password

			if redundant : 

				first_block = filehandle.read(64)

				if len(first_block) != 64 :
					raise CorruptionError("The data in file is corrupted")

				check_block = vals[-1]

				if check_block != first_block :

					raise PasswordError("Incorrect Password Entered for Decryption")

			input_line = filehandle.read(BUFFER_SIZE)
			counter += BUFFER_SIZE

			while input_line != b"" :

				data += cipher.decrypt(input_line)
				input_line = filehandle.read(BUFFER_SIZE)
				counter+= BUFFER_SIZE

	if progress_bar :


		content_length = os.stat(input_file).st_size

		import threading
		print(   f"Decrypting Data: |{empty_block*block_length}| 0/{content_length}B", file = sys.stderr , end = '' )

		thread = threading.Thread(target = subroutine1)

		thread.start()

		while thread.is_alive():
			print(   f"\rDecrypting Data: |{((full_block*(counter*block_length//content_length))+(empty_block*block_length))[:25]}| {counter}/{content_length}B",
						file = sys.stderr , end = '' )

		print(   f"\rData Decryption Complete|{full_block*block_length}| {content_length}/{content_length}B", file = sys.stderr  )

	else:

		subroutine1()


	return data

def dec_b2b(data : bytes, password: bytes , redundant : bool = True):

	if not redundant:
		dec_redundant_warning()

	data_len = len(data)

	if redundant:

		assert data_len > 71, \
		f'Data is corrupted. Nonce and first block not entirely loaded'

	else :
		assert data_len > 7 , \
		f'Data is corrupted. Nonce not entirely loaded'

	vals = key_maker(password , nonce = data[:8] , redundant = redundant)
	cipher = Salsa20.new(vals[1] , vals[0])

	if redundant:

		if vals[-1] != data[8:72]:

			raise PasswordError("Incorrect password Entered")

		return cipher.decrypt(data[72:])

	return cipher.decrypt(data[8:])

def dec_b2f(data : bytes , password: bytes , output_file : str , redundant : bool = True , progress_bar : bool = False):

	if not redundant:
		dec_redundant_warning()

	data_len = len(data)

	if redundant:
		assert data_len > 71, \
		f'Data is corrupted. Nonce and first block not entirely loaded'

	else :
		assert data_len > 7 , \
		f'Data is corrupted. Nonce not entirely loaded'

	vals = key_maker(password , nonce = data[:8] , redundant = redundant)

	if redundant :

		if vals[-1] != data[8:72] :

			raise PasswordError("Incorrect Password Provided")


	cipher = Salsa20.new(vals[1] , vals[0])

	counter = 72 if redundant else 8
	rounds = (data_len - counter) // BUFFER_SIZE

	def subroutine1():

		nonlocal cipher,  output_file , counter, data, rounds
		global BUFFER_SIZE

		with open(output_file , 'wb') as filehandle:

			for i in range(rounds):

				filehandle.write(cipher.decrypt(data[counter : counter +BUFFER_SIZE]))
				counter += BUFFER_SIZE

			filehandle.write(cipher.decrypt(data[counter : ]))
			counter += BUFFER_SIZE

	if progress_bar :

		import threading
		print(   f"Decrypting Data: |{empty_block*block_length}| 0/{data_len}B", file = sys.stderr , end = '' )

		thread = threading.Thread(target = subroutine1)

		thread.start()

		while thread.is_alive():
			print(   f"\rDecrypting Data: |{((full_block*(counter*block_length//data_len))+(empty_block*block_length))[:25]}| {counter}/{data_len}B",
						file = sys.stderr , end = '' )

		print(   f"\rData Decryption Complete|{full_block*block_length}| {data_len}/{data_len}B", file = sys.stderr  )

	else:

		subroutine1()


	return True

def dec_f2f(input_file : str , output_file : str , password : bytes , redundant : bool = True, progress_bar : bool = False):

	if not redundant:
		dec_redundant_warning()

	counter = 0
	def subroutine1():

		nonlocal counter

		with open(input_file , 'rb') as readhandle:

			nonce = readhandle.read(8)

			if len(nonce) < 8:
				raise CorruptionError("File is corrupted")

			vals = key_maker(password = password , nonce = nonce, redundant = redundant)
			cipher = Salsa20.new(vals[1], vals[0])

			if redundant:

				check_block = readhandle.read(64)

				if len(check_block) < 64:

					raise CorruptionError("File is corrupted")


				if vals[-1] != check_block:
					raise PasswordError("Incorrect password Entered")

			with open(output_file , 'wb') as writehandle:

				input_line = readhandle.read(BUFFER_SIZE)
				counter += BUFFER_SIZE

				while input_line != b"" :

					writehandle.write(cipher.decrypt(input_line))
					input_line = readhandle.read(BUFFER_SIZE)
					counter += BUFFER_SIZE

	if progress_bar :


		content_length = os.stat(input_file).st_size

		import threading
		print(   f"Decrypting Data: |{empty_block*block_length}| 0/{content_length}B", file = sys.stderr , end = '' )

		thread = threading.Thread(target = subroutine1)

		thread.start()

		while thread.is_alive():
			print(   f"\rDecrypting Data: |{((full_block*(counter*block_length//content_length))+(empty_block*block_length))[:25]}| {counter}/{content_length}B",
						file = sys.stderr , end = '' )

		print(   f"\rData Decryption Complete|{full_block*block_length}| {content_length}/{content_length}B", file = sys.stderr  )

	else:

		subroutine1()

	return True


"""Dependent Functions"""

#enc_b2f
def enc_s2f(data : bytes , filename : str , password: str , redundant : bool = True , progress_bar : bool = False):

	import _pickle as pickle

	data = pickle.dumps(data)

	return enc_b2f(data = data , filename = filename , password = password , redundant = redundant , progress_bar = progress_bar)

#enc_b2b
def enc_s2b(data : bytes , password : bytes, redundant : bool = True):

	import _pickle as pickle

	data = pickle.dumps(data)

	return enc_b2b(data = data , password = password , redundant = redundant)

#dec_f2b
def dec_f2s(input_file : str , password: bytes , redundant : bool = True, progress_bar : bool = False):

	import _pickle as pickle

	return pickle.loads(dec_f2b(input_file = input_file, password = password , redundant = redundant , progress_bar = progress_bar))

#dec_b2b
def dec_b2s(data : bytes, password: bytes , redundant : bool = True):

	import _pickle as pickle

	return pickle.loads(dec_b2b(data = data , password = password , redundant = redundant))
